/* 
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using locationiq.Api;
using locationiq.Model;
using locationiq.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace locationiq.Test
{
    /// <summary>
    ///  Class for testing Namedetails
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class NamedetailsTests
    {
        // TODO uncomment below to declare an instance variable for Namedetails
        //private Namedetails instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Namedetails
            //instance = new Namedetails();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Namedetails
        /// </summary>
        [Test]
        public void NamedetailsInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Namedetails
            //Assert.IsInstanceOfType<Namedetails> (instance, "variable 'instance' is a Namedetails");
        }


        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Test]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }

    }

}
